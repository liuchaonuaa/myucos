<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\UCOSII-2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\UCOSII-2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Tue Jun 02 17:01:28 2015
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
beep_task &rArr; userCardCheck &rArr; userRC522_PcdReadBinary &rArr; userRC522_PcdComMF522 &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[201]">__user_initial_stackheap</a>
 <LI><a href="#[e9]">OS_CPU_SR_Save</a>
 <LI><a href="#[ec]">OS_CPU_SR_Restore</a>
 <LI><a href="#[1be]">OSStartHighRdy</a>
 <LI><a href="#[1bc]">OSCtxSw</a>
 <LI><a href="#[1b9]">OSIntCtxSw</a>
 <LI><a href="#[12]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[26]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[1ac]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[1a7]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[15]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">SFTStopBlkTime</a> from softtimer.o(.text) referenced 2 times from softtimer.o(.data)
 <LI><a href="#[3]">SFT_CARDLEDFlash</a> from softtimer.o(.text) referenced 2 times from softtimer.o(.data)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from delay.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[16]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from mytimer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM3_IRQHandler</a> from mytimer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">USART3_IRQHandler</a> from usart3.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">USB_LP_CAN1_RX0_IRQHandler</a> from can1.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[58]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[57]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[53]">beep_task</a> from task.o(.text) referenced from task.o(.text)
 <LI><a href="#[52]">can1_task</a> from task.o(.text) referenced from task.o(.text)
 <LI><a href="#[7]">comm3_iapRequest</a> from communication3.o(.text) referenced 2 times from communication3.o(.data)
 <LI><a href="#[8]">comm3_iapUpdate</a> from communication3.o(.text) referenced 2 times from communication3.o(.data)
 <LI><a href="#[9]">comm3_voiceUpdate</a> from communication3.o(.text) referenced 2 times from communication3.o(.data)
 <LI><a href="#[5]">comm3_zikuRequest</a> from communication3.o(.text) referenced 2 times from communication3.o(.data)
 <LI><a href="#[6]">comm3_zikuUpdate</a> from communication3.o(.text) referenced 2 times from communication3.o(.data)
 <LI><a href="#[50]">start_task</a> from task.o(.text) referenced from main.o(.text)
 <LI><a href="#[51]">uart3_task</a> from task.o(.text) referenced from task.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[203]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[204]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[205]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[206]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[207]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1f9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[208]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[62]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[209]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[20a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[20b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[20c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[20d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[210]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[211]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[212]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[213]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[214]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[215]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[216]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[217]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[218]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[219]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[21a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[21c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[67]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[21d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[21e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[21f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[220]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[221]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[222]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[5b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[223]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[61]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[224]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[63]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[225]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[202]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[66]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[226]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[68]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[227]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>spi_delay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, myspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rec_1_Char
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_1_Char
</UL>

<P><STRONG><a name="[71]"></a>MYSPI_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, myspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MYSPI_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
</UL>

<P><STRONG><a name="[74]"></a>Send_1_Char</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, myspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Send_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>

<P><STRONG><a name="[76]"></a>Rec_1_Char</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, myspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadByte
</UL>

<P><STRONG><a name="[78]"></a>SPI1_Init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32spi1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_InitRc522
</UL>

<P><STRONG><a name="[7c]"></a>SPI1_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32spi1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>

<P><STRONG><a name="[7d]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32spi1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_WriteRawRC
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ReadRawRC
</UL>

<P><STRONG><a name="[81]"></a>SPI2_Init</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_InitRc522
</UL>

<P><STRONG><a name="[83]"></a>SPI2_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32spi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>

<P><STRONG><a name="[84]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_WriteRawRC
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ReadRawRC
</UL>

<P><STRONG><a name="[85]"></a>Led_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Led_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[87]"></a>LEDSwitchCtrl</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEDSwitchCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFTStartBlkTime
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFTStopBlkTime
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFT_CARDLEDFlash
</UL>

<P><STRONG><a name="[8a]"></a>Beep_DelayMs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, beep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
</UL>

<P><STRONG><a name="[88]"></a>Beep_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Beep_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[89]"></a>Beep_On</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Beep_On
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_DelayMs
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_task
</UL>

<P><STRONG><a name="[8b]"></a>Speaker_Pin_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, speaker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Speaker_Pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[8c]"></a>Speaker_Reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, speaker.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Segment
</UL>

<P><STRONG><a name="[8e]"></a>Voice_Segment</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, speaker.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_Reset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[97]"></a>spi2_delay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi2_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_ReadByte
</UL>

<P><STRONG><a name="[90]"></a>Voice_DelayMs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wt588d16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Reset
</UL>

<P><STRONG><a name="[8f]"></a>Wt588d16_Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wt588d16_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_DelayMs
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Pin_Init
</UL>

<P><STRONG><a name="[91]"></a>Wt588d16_Pin_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Wt588d16_Pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Reset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[92]"></a>VoiceUpdate_Pin_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VoiceUpdate_Pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_voiceUpdate
</UL>

<P><STRONG><a name="[93]"></a>VoiceNormal_Pin_Config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wt588d16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[94]"></a>Wt588d16_Play</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Wt588d16_Play &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_task
</UL>

<P><STRONG><a name="[96]"></a>MYSPI2_ReadByte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MYSPI2_ReadByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_delay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFLASH_Read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceRead_CMD
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_ChipInfo
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_ReadString
</UL>

<P><STRONG><a name="[98]"></a>MYSPI2_ReadString</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wt588d16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_ReadByte
</UL>

<P><STRONG><a name="[99]"></a>MYSPI2_WriteByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_delay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ERASE
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFLASH_Read
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseChip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseSector
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_DIS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_EN
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceRead_CMD
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_ChipInfo
</UL>

<P><STRONG><a name="[9a]"></a>SPIFLASH_ChipInfo</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wt588d16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_ReadByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[9b]"></a>VoiceRead_CMD</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VoiceRead_CMD &rArr; MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_ReadByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceBusy_Test
</UL>

<P><STRONG><a name="[9c]"></a>VoiceBusy_Test</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VoiceBusy_Test &rArr; VoiceRead_CMD &rArr; MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceRead_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ERASE
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFLASH_Read
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseChip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseSector
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_DIS
</UL>

<P><STRONG><a name="[9d]"></a>SPIFLASH_Write_EN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIFLASH_Write_EN &rArr; MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ERASE
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseChip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseSector
</UL>

<P><STRONG><a name="[9e]"></a>SPIFLASH_Write_DIS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIFLASH_Write_DIS &rArr; VoiceBusy_Test &rArr; VoiceRead_CMD &rArr; MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceBusy_Test
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ERASE
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseChip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseSector
</UL>

<P><STRONG><a name="[9f]"></a>SPIFLASH_EraseSector</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPIFLASH_EraseSector &rArr; SPIFLASH_Write_DIS &rArr; VoiceBusy_Test &rArr; VoiceRead_CMD &rArr; MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_DIS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_EN
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceBusy_Test
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseSecs
</UL>

<P><STRONG><a name="[a0]"></a>SPIFLASH_EraseChip</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wt588d16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_DIS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_EN
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceBusy_Test
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceFlashTest
</UL>

<P><STRONG><a name="[a1]"></a>SPIFLASH_EraseSecs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPIFLASH_EraseSecs &rArr; SPIFLASH_EraseSector &rArr; SPIFLASH_Write_DIS &rArr; VoiceBusy_Test &rArr; VoiceRead_CMD &rArr; MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceFlashErase
</UL>

<P><STRONG><a name="[a2]"></a>VoiceFLASH_Read</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wt588d16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceBusy_Test
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_ReadByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceFlashTest
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseDataProgram
</UL>

<P><STRONG><a name="[a3]"></a>SPI_FLASH_Write</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_FLASH_Write &rArr; SPIFLASH_Write_DIS &rArr; VoiceBusy_Test &rArr; VoiceRead_CMD &rArr; MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_DIS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_EN
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceBusy_Test
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFlash_Write
</UL>

<P><STRONG><a name="[a4]"></a>VoiceFlash_Write</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VoiceFlash_Write &rArr; SPI_FLASH_Write &rArr; SPIFLASH_Write_DIS &rArr; VoiceBusy_Test &rArr; VoiceRead_CMD &rArr; MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceWrite
</UL>

<P><STRONG><a name="[a5]"></a>voiceFlashErase</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = voiceFlashErase &rArr; SPIFLASH_EraseSecs &rArr; SPIFLASH_EraseSector &rArr; SPIFLASH_Write_DIS &rArr; VoiceBusy_Test &rArr; VoiceRead_CMD &rArr; MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseSecs
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_voiceUpdate
</UL>

<P><STRONG><a name="[a6]"></a>SPI_FLASH_ERASE</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wt588d16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_DIS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_EN
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceBusy_Test
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseDataProgram
</UL>

<P><STRONG><a name="[a7]"></a>EraseDataProgram</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wt588d16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ERASE
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFLASH_Read
</UL>

<P><STRONG><a name="[a8]"></a>voiceWrite</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wt588d16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = voiceWrite &rArr; VoiceFlash_Write &rArr; SPI_FLASH_Write &rArr; SPIFLASH_Write_DIS &rArr; VoiceBusy_Test &rArr; VoiceRead_CMD &rArr; MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_putString
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFlash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_voiceUpdate
</UL>

<P><STRONG><a name="[aa]"></a>voiceFlashTest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wt588d16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFLASH_Read
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseChip
</UL>

<P><STRONG><a name="[ab]"></a>SPI_Flash_ReadByte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rec_1_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_ReadFlash
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadID
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CMD
</UL>

<P><STRONG><a name="[ac]"></a>SPI_Flash_SendByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_Flash_SendByte &rArr; Send_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_1_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_Clr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_ReadFlash
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CMD
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DIS
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EN
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadID
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CMD
</UL>

<P><STRONG><a name="[ad]"></a>SST25_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SST25_Init &rArr; MYSPI_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[ae]"></a>Read_CMD</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Test
</UL>

<P><STRONG><a name="[af]"></a>FlashReadID</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sst25vf016.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadByte
</UL>

<P><STRONG><a name="[b0]"></a>Busy_Test</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_Clr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CMD
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DIS
</UL>

<P><STRONG><a name="[b1]"></a>Write_EN</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Write_EN &rArr; SPI_Flash_SendByte &rArr; Send_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_Clr
</UL>

<P><STRONG><a name="[b2]"></a>Write_DIS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Write_DIS &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash
</UL>

<P><STRONG><a name="[b3]"></a>Write_CMD</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_Clr
</UL>

<P><STRONG><a name="[b4]"></a>SST25_ReadFlash</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SST25_ReadFlash &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_graphic_16x16
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_graphic_8x16
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16x16
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_8x16
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFlash
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInfoFromSpiFlash
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInfoToSpiFlash
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
</UL>

<P><STRONG><a name="[b5]"></a>Page_Clr</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Page_Clr &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CMD
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EN
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInfoToSpiFlash
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSectors
</UL>

<P><STRONG><a name="[b6]"></a>EraseSectors</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EraseSectors &rArr; Page_Clr &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseZikuFlash
</UL>

<P><STRONG><a name="[b7]"></a>SST25_WriteFlash</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SST25_WriteFlash &rArr; Page_Clr &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_Clr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CMD
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DIS
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EN
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCharToFlash
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCommDeal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
</UL>

<P><STRONG><a name="[b8]"></a>SST25_WriteFlash2</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SST25_WriteFlash2 &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CMD
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DIS
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EN
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInfoToSpiFlash
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ziku_Write
</UL>

<P><STRONG><a name="[b9]"></a>SPI_Flash_Write</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, sst25vf016.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_Flash_Write &rArr; SST25_WriteFlash &rArr; Page_Clr &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_ReadFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progWrite
</UL>

<P><STRONG><a name="[ba]"></a>writeInfoToSpiFlash</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, sst25vf016.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash2
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_Clr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_ReadFlash
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFlash
</UL>

<P><STRONG><a name="[bc]"></a>readInfoFromSpiFlash</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, sst25vf016.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_ReadFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFlash
</UL>

<P><STRONG><a name="[bd]"></a>testFlash</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sst25vf016.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInfoFromSpiFlash
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInfoToSpiFlash
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_ReadFlash
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[c5]"></a>delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd12864_init
</UL>

<P><STRONG><a name="[bf]"></a>LCD_Pin_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd12864_init
</UL>

<P><STRONG><a name="[c1]"></a>writecommand</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lcd12864.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_address
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd12864_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_full
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
</UL>

<P><STRONG><a name="[c2]"></a>writedata</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lcd12864.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16x16
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_8x16
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_full
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
</UL>

<P><STRONG><a name="[c0]"></a>disp_clear</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = disp_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd12864_init
</UL>

<P><STRONG><a name="[c3]"></a>disp_full</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>

<P><STRONG><a name="[c4]"></a>lcd12864_init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd12864_init &rArr; LCD_Pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pin_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[c6]"></a>lcd_address</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_address
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16x16
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_8x16
</UL>

<P><STRONG><a name="[c7]"></a>display_graphic_8x16</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = display_graphic_8x16 &rArr; SST25_ReadFlash &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_address
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_ReadFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[c8]"></a>display_graphic_16x16</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = display_graphic_16x16 &rArr; SST25_ReadFlash &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_address
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_ReadFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[c9]"></a>Show_Str</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Show_Str &rArr; display_graphic_16x16 &rArr; SST25_ReadFlash &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16x16
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_8x16
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_StrInLine
</UL>

<P><STRONG><a name="[ca]"></a>Show_StrInLine</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Show_StrInLine &rArr; Show_Str &rArr; display_graphic_16x16 &rArr; SST25_ReadFlash &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_task
</UL>

<P><STRONG><a name="[cc]"></a>FlashRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, myflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[cb]"></a>FlashWrite</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, myflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FlashWrite &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_iapRequest
</UL>

<P><STRONG><a name="[d7]"></a>RTC_Get_Week</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[d6]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[d4]"></a>RTC_Get</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[d8]"></a>RTC_Set</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCommDeal
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_task
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[dc]"></a>RTC_Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = RTC_Init &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = RTC_IRQHandler &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>oled_delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oled_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[ed]"></a>OLED_Pin_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[ef]"></a>oled_writecommand</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, oled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_address
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_disp_full
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_disp_clear
</UL>

<P><STRONG><a name="[f0]"></a>oled_writedata</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, oled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_graphic_16x16
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_graphic_8x16
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_disp_full
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_disp_clear
</UL>

<P><STRONG><a name="[ee]"></a>oled_disp_clear</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = oled_disp_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_writedata
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[f1]"></a>oled_disp_full</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_writedata
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_writecommand
</UL>

<P><STRONG><a name="[f2]"></a>oled_init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = oled_init &rArr; OLED_Pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_disp_clear
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_writecommand
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pin_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[f4]"></a>oled_address</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = oled_address
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_graphic_16x16
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_graphic_8x16
</UL>

<P><STRONG><a name="[f5]"></a>oled_display_graphic_8x16</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = oled_display_graphic_8x16 &rArr; SST25_ReadFlash &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_address
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_writedata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_ReadFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Show_Str
</UL>

<P><STRONG><a name="[f6]"></a>oled_display_graphic_16x16</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = oled_display_graphic_16x16 &rArr; SST25_ReadFlash &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_address
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_writedata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_ReadFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Show_Str
</UL>

<P><STRONG><a name="[f7]"></a>oled_Show_Str</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = oled_Show_Str &rArr; oled_display_graphic_16x16 &rArr; SST25_ReadFlash &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_graphic_16x16
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_graphic_8x16
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Show_StrInLine
</UL>

<P><STRONG><a name="[f8]"></a>oled_Show_StrInLine</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = oled_Show_StrInLine &rArr; oled_Show_Str &rArr; oled_display_graphic_16x16 &rArr; SST25_ReadFlash &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Show_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_task
</UL>

<P><STRONG><a name="[100]"></a>bikeRC522_delay_ns</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bikerc522.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_M500PcdConfigISOType
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdReset
</UL>

<P><STRONG><a name="[f9]"></a>bikeRC522_ReadRawRC</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bikerc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bikeRC522_ReadRawRC &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAuthState
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdComMF522
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_CalulateCRC
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAntennaOn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ClearBitMask
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_SetBitMask
</UL>

<P><STRONG><a name="[fa]"></a>bikeRC522_WriteRawRC</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bikerc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bikeRC522_WriteRawRC &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAnticoll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdRequest
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdComMF522
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_CalulateCRC
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_M500PcdConfigISOType
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ClearBitMask
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_SetBitMask
</UL>

<P><STRONG><a name="[fb]"></a>bikeRC522_SetBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bikerc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bikeRC522_SetBitMask &rArr; bikeRC522_WriteRawRC &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_WriteRawRC
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAnticoll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdRequest
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdComMF522
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_CalulateCRC
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAntennaOn
</UL>

<P><STRONG><a name="[fc]"></a>bikeRC522_ClearBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bikerc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bikeRC522_ClearBitMask &rArr; bikeRC522_WriteRawRC &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_WriteRawRC
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdSelect
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAnticoll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdRequest
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdComMF522
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_CalulateCRC
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_M500PcdConfigISOType
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAntennaOff
</UL>

<P><STRONG><a name="[fd]"></a>bikeRC522_PcdAntennaOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bikerc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bikeRC522_PcdAntennaOn &rArr; bikeRC522_SetBitMask &rArr; bikeRC522_WriteRawRC &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_SetBitMask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_Reset_RC522
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_InitRc522
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_M500PcdConfigISOType
</UL>

<P><STRONG><a name="[fe]"></a>bikeRC522_PcdAntennaOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bikerc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bikeRC522_PcdAntennaOff &rArr; bikeRC522_ClearBitMask &rArr; bikeRC522_WriteRawRC &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_Reset_RC522
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_InitRc522
</UL>

<P><STRONG><a name="[ff]"></a>bikeRC522_PcdReset</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bikerc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bikeRC522_PcdReset &rArr; bikeRC522_WriteRawRC &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_WriteRawRC
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_delay_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_Reset_RC522
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_InitRc522
</UL>

<P><STRONG><a name="[101]"></a>bikeRC522_M500PcdConfigISOType</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bikerc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bikeRC522_M500PcdConfigISOType &rArr; bikeRC522_PcdAntennaOn &rArr; bikeRC522_SetBitMask &rArr; bikeRC522_WriteRawRC &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAntennaOn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ClearBitMask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_WriteRawRC
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_delay_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_InitRc522
</UL>

<P><STRONG><a name="[102]"></a>bikeRC522_InitRc522</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bikerc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = bikeRC522_InitRc522 &rArr; bikeRC522_M500PcdConfigISOType &rArr; bikeRC522_PcdAntennaOn &rArr; bikeRC522_SetBitMask &rArr; bikeRC522_WriteRawRC &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_M500PcdConfigISOType
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAntennaOff
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAntennaOn
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[103]"></a>bikeRC522_Reset_RC522</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bikerc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAntennaOff
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAntennaOn
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[104]"></a>bikeRC522_CalulateCRC</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bikerc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ClearBitMask
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_SetBitMask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_WriteRawRC
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdHalt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdWrite
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdRead
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdSelect
</UL>

<P><STRONG><a name="[105]"></a>bikeRC522_PcdComMF522</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, bikerc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ClearBitMask
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_SetBitMask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_WriteRawRC
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdHalt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdWrite
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdRead
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAuthState
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdSelect
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdAnticoll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdRequest
</UL>

<P><STRONG><a name="[106]"></a>bikeRC522_PcdRequest</STRONG> (Thumb, 86 bytes, Stack size 88 bytes, bikerc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdComMF522
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ClearBitMask
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_SetBitMask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_WriteRawRC
</UL>

<P><STRONG><a name="[107]"></a>bikeRC522_PcdAnticoll</STRONG> (Thumb, 122 bytes, Stack size 96 bytes, bikerc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdComMF522
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ClearBitMask
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_SetBitMask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_WriteRawRC
</UL>

<P><STRONG><a name="[108]"></a>bikeRC522_PcdSelect</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, bikerc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdComMF522
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_CalulateCRC
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ClearBitMask
</UL>

<P><STRONG><a name="[109]"></a>bikeRC522_PcdAuthState</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, bikerc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdComMF522
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_ReadRawRC
</UL>

<P><STRONG><a name="[10a]"></a>bikeRC522_PcdRead</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, bikerc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdComMF522
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_CalulateCRC
</UL>

<P><STRONG><a name="[10b]"></a>bikeRC522_PcdWrite</STRONG> (Thumb, 150 bytes, Stack size 96 bytes, bikerc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdComMF522
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_CalulateCRC
</UL>

<P><STRONG><a name="[10c]"></a>bikeRC522_PcdHalt</STRONG> (Thumb, 52 bytes, Stack size 80 bytes, bikerc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_PcdComMF522
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_CalulateCRC
</UL>

<P><STRONG><a name="[114]"></a>userRC522_delay_ns</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, userrc522.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_M500PcdConfigISOType
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdReset
</UL>

<P><STRONG><a name="[10d]"></a>userRC522_ReadRawRC</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = userRC522_ReadRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAuthState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAntennaOn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_SetBitMask
</UL>

<P><STRONG><a name="[10e]"></a>userRC522_WriteRawRC</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAnticoll
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRequest
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_M500PcdConfigISOType
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdReset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_SetBitMask
</UL>

<P><STRONG><a name="[10f]"></a>userRC522_SetBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = userRC522_SetBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_WriteRawRC
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAnticoll
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRequest
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAntennaOn
</UL>

<P><STRONG><a name="[110]"></a>userRC522_ClearBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_WriteRawRC
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdUpdateBinary
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdReadBinary
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSelectFile
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdExAuth
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdGetChallenge
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRats
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSelect
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAnticoll
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRequest
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_M500PcdConfigISOType
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAntennaOff
</UL>

<P><STRONG><a name="[111]"></a>userRC522_PcdAntennaOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = userRC522_PcdAntennaOn &rArr; userRC522_SetBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_SetBitMask
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_Reset_RC522
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_InitRc522
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_M500PcdConfigISOType
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCard_Check
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userCardCheck
</UL>

<P><STRONG><a name="[112]"></a>userRC522_PcdAntennaOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = userRC522_PcdAntennaOff &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_Reset_RC522
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_InitRc522
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCard_Check
</UL>

<P><STRONG><a name="[113]"></a>userRC522_PcdReset</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = userRC522_PcdReset &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_WriteRawRC
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_delay_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_Reset_RC522
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_InitRc522
</UL>

<P><STRONG><a name="[115]"></a>userRC522_M500PcdConfigISOType</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = userRC522_M500PcdConfigISOType &rArr; userRC522_PcdAntennaOn &rArr; userRC522_SetBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAntennaOn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_WriteRawRC
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_delay_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_InitRc522
</UL>

<P><STRONG><a name="[116]"></a>userRC522_InitRc522</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = userRC522_InitRc522 &rArr; userRC522_M500PcdConfigISOType &rArr; userRC522_PcdAntennaOn &rArr; userRC522_SetBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_M500PcdConfigISOType
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAntennaOff
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAntennaOn
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[117]"></a>userRC522_Reset_RC522</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, userrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAntennaOff
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAntennaOn
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[124]"></a>userRC522_PcdSwitchPCB</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, userrc522.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdUpdateBinary
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdReadBinary
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSelectFile
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdExAuth
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdGetChallenge
</UL>

<P><STRONG><a name="[118]"></a>userRC522_CalulateCRC</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = userRC522_CalulateCRC &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_SetBitMask
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_WriteRawRC
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdUpdateBinary
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdReadBinary
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSelectFile
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdExAuth
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdGetChallenge
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRats
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdHalt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdWrite
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRead
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSelect
</UL>

<P><STRONG><a name="[119]"></a>userRC522_PcdComMF522</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = userRC522_PcdComMF522 &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_SetBitMask
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_WriteRawRC
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdUpdateBinary
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdReadBinary
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSelectFile
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdExAuth
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdGetChallenge
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRats
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdHalt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdWrite
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRead
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAuthState
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSelect
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAnticoll
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRequest
</UL>

<P><STRONG><a name="[11a]"></a>userRC522_PcdRequest</STRONG> (Thumb, 100 bytes, Stack size 88 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = userRC522_PcdRequest &rArr; userRC522_PcdComMF522 &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_SetBitMask
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCard_Check
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userCardCheck
</UL>

<P><STRONG><a name="[11b]"></a>userRC522_PcdAnticoll</STRONG> (Thumb, 112 bytes, Stack size 96 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = userRC522_PcdAnticoll &rArr; userRC522_PcdComMF522 &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_SetBitMask
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCard_Check
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userCardCheck
</UL>

<P><STRONG><a name="[11c]"></a>userRC522_PcdSelect</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = userRC522_PcdSelect &rArr; userRC522_PcdComMF522 &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCard_Check
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userCardCheck
</UL>

<P><STRONG><a name="[11d]"></a>userRC522_PcdAuthState</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, userrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCard_Check
</UL>

<P><STRONG><a name="[11e]"></a>userRC522_PcdRead</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, userrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCard_Check
</UL>

<P><STRONG><a name="[11f]"></a>userRC522_PcdWrite</STRONG> (Thumb, 150 bytes, Stack size 96 bytes, userrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
</UL>

<P><STRONG><a name="[120]"></a>userRC522_PcdHalt</STRONG> (Thumb, 52 bytes, Stack size 80 bytes, userrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCard_Check
</UL>

<P><STRONG><a name="[121]"></a>userRC522_PcdRats</STRONG> (Thumb, 78 bytes, Stack size 80 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = userRC522_PcdRats &rArr; userRC522_PcdComMF522 &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userCardCheck
</UL>

<P><STRONG><a name="[123]"></a>userRC522_PcdGetChallenge</STRONG> (Thumb, 166 bytes, Stack size 88 bytes, userrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSwitchPCB
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[125]"></a>userRC522_PcdExAuth</STRONG> (Thumb, 202 bytes, Stack size 88 bytes, userrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSwitchPCB
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[126]"></a>userRC522_PcdSelectFile</STRONG> (Thumb, 192 bytes, Stack size 88 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = userRC522_PcdSelectFile &rArr; userRC522_PcdComMF522 &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSwitchPCB
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userCardCheck
</UL>

<P><STRONG><a name="[127]"></a>userRC522_PcdReadBinary</STRONG> (Thumb, 186 bytes, Stack size 96 bytes, userrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = userRC522_PcdReadBinary &rArr; userRC522_PcdComMF522 &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSwitchPCB
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userCardCheck
</UL>

<P><STRONG><a name="[128]"></a>userRC522_PcdUpdateBinary</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, userrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdComMF522
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_CalulateCRC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSwitchPCB
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_ClearBitMask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[129]"></a>Time2_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mytimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Time2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mytimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFT_Timer2_Irq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>Time3_Init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mytimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Time3_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[31]"></a>TIM3_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mytimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[228]"></a>timer3_GetCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mytimer.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>timer3_ResetCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mytimer.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>App_DelayMs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>AppInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = AppInit &rArr; userRC522_InitRc522 &rArr; userRC522_M500PcdConfigISOType &rArr; userRC522_PcdAntennaOn &rArr; userRC522_SetBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_InitRc522
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_InitRc522
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd12864_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Pin_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_Pin_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskInit
</UL>

<P><STRONG><a name="[134]"></a>AppInitSysPrmt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AppInitSysPrmt &rArr; Rcv3BufInit &rArr; Rcv3BufClearAll
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcv3BufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskInit
</UL>

<P><STRONG><a name="[136]"></a>TaskInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TaskInit &rArr; AppInit &rArr; userRC522_InitRc522 &rArr; userRC522_M500PcdConfigISOType &rArr; userRC522_PcdAntennaOn &rArr; userRC522_SetBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInitSysPrmt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[50]"></a>start_task</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = start_task &rArr; TaskInit &rArr; AppInit &rArr; userRC522_InitRc522 &rArr; userRC522_M500PcdConfigISOType &rArr; userRC522_PcdAntennaOn &rArr; userRC522_SetBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>CRC_Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[144]"></a>CRC_GetVal</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRC_GetVal
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_voiceUpdate
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_iapUpdate
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_zikuUpdate
</UL>

<P><STRONG><a name="[146]"></a>progWrite</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, prog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = progWrite &rArr; SPI_Flash_Write &rArr; SST25_WriteFlash &rArr; Page_Clr &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_putString
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_iapUpdate
</UL>

<P><STRONG><a name="[147]"></a>eraseZikuFlash</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ziku.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eraseZikuFlash &rArr; EraseSectors &rArr; Page_Clr &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_zikuRequest
</UL>

<P><STRONG><a name="[137]"></a>WriteCharToFlash</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ziku.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WriteCharToFlash &rArr; SST25_WriteFlash &rArr; Page_Clr &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_task
</UL>

<P><STRONG><a name="[148]"></a>ziku_Write</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ziku.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ziku_Write &rArr; SST25_WriteFlash2 &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_putString
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_zikuUpdate
</UL>

<P><STRONG><a name="[149]"></a>UserCard_Check</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usercard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdHalt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRead
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAuthState
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSelect
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAnticoll
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRequest
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAntennaOff
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAntennaOn
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[138]"></a>userCardCheck</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, usercard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = userCardCheck &rArr; userRC522_PcdReadBinary &rArr; userRC522_PcdComMF522 &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdReadBinary
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSelectFile
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRats
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSelect
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAnticoll
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRequest
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdAntennaOn
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_task
</UL>

<P><STRONG><a name="[12f]"></a>SFT_Timer2_Irq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, softtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SFT_Timer2_Irq
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>SFT_LED_Start</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, softtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFTStartBlkTime
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_task
</UL>

<P><STRONG><a name="[22b]"></a>SFT_LED_Stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, softtimer.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>SFTStartBlkTime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, softtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFTStartBlkTime &rArr; LEDSwitchCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFT_LED_Start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSwitchCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_task
</UL>

<P><STRONG><a name="[140]"></a>comm3_Analyse</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, communication3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = comm3_Analyse &rArr; comm3_FunctionHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_FunctionHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_task
</UL>

<P><STRONG><a name="[14b]"></a>uart3_init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, usart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>

<P><STRONG><a name="[150]"></a>Uart3RcvData</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, usart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = Uart3RcvData &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[3b]"></a>USART3_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; Uart3RcvData &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3RcvData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[156]"></a>uart3_putchar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_putString
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
</UL>

<P><STRONG><a name="[155]"></a>uart3_send</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_putchar
</UL>

<P><STRONG><a name="[a9]"></a>uart3_putString</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart3_putString
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceWrite
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_voiceUpdate
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_iapUpdate
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_zikuUpdate
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_zikuRequest
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ziku_Write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progWrite
</UL>

<P><STRONG><a name="[157]"></a>Rcv3BufClearAll</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rcv3BufClearAll
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcv3BufInit
</UL>

<P><STRONG><a name="[135]"></a>Rcv3BufInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Rcv3BufInit &rArr; Rcv3BufClearAll
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcv3BufClearAll
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInitSysPrmt
</UL>

<P><STRONG><a name="[159]"></a>RcvCan1BufClearAll</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, can1comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RcvCan1BufClearAll
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRxDeal
</UL>

<P><STRONG><a name="[15c]"></a>myMin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can1comm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[15a]"></a>CAN1_SendData</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, can1comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAN_Address
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendOneFrame
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myMin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Send_ReportStatus
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Send_ReportTradeEnd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Send_ReportTradeStart
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Send_EAD_ReturnBike
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Send_EAD_RentBike
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Send_Unlock
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Send_QueryStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Send_SyncCharge
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Send_SyncTime
</UL>

<P><STRONG><a name="[15e]"></a>CANRxDeal</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, can1comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = CANRxDeal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAN_Address
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvCan1BufClearAll
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>CanCommDeal</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, can1comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CanCommDeal &rArr; SST25_WriteFlash &rArr; Page_Clr &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_WriteFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_task
</UL>

<P><STRONG><a name="[15f]"></a>Can1_Send_SyncTime</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, can1comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[160]"></a>Can1_Send_SyncCharge</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, can1comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[161]"></a>Can1_Send_QueryStatus</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, can1comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[162]"></a>Can1_Send_Unlock</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, can1comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[163]"></a>Can1_Send_EAD_RentBike</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, can1comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[164]"></a>Can1_Send_EAD_ReturnBike</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, can1comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[165]"></a>Can1_Send_ReportTradeStart</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, can1comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[166]"></a>Can1_Send_ReportTradeEnd</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, can1comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[167]"></a>Can1_Send_ReportStatus</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, can1comm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[168]"></a>CAN_GPIO_Configuration</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_init
</UL>

<P><STRONG><a name="[169]"></a>CAN_Address_GPIO_Config</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_Address_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_init
</UL>

<P><STRONG><a name="[15b]"></a>Read_CAN_Address</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_CAN_Address
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRxDeal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[16a]"></a>CAN_NVIC_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_init
</UL>

<P><STRONG><a name="[16b]"></a>CAN_ConfigFilter</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_ConfigFilter &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_init
</UL>

<P><STRONG><a name="[133]"></a>can1_init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = can1_init &rArr; CAN_ConfigFilter &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfigFilter
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NVIC_Configuration
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Address_GPIO_Config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIO_Configuration
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAN_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInit
</UL>

<P><STRONG><a name="[28]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; CANRxDeal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRxDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>CAN1_SendOneFrame</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, can1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>delay_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>delay_us</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Play
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[8d]"></a>delay_ms</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_Reset_RC522
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_InitRc522
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_Reset_RC522
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_InitRc522
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Play
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Segment
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_Reset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_voiceUpdate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCard_Check
</UL>

<P><STRONG><a name="[6a]"></a>NVIC_Configuration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[201]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[179]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[d3]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NVIC_Configuration
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[17a]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[22c]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[17b]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[17d]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[73]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_InitRc522
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_InitRc522
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pin_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pin_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceNormal_Pin_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceUpdate_Pin_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Pin_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_Pin_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Address_GPIO_Config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIO_Configuration
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[22d]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_ReadByte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rec_1_Char
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAN_Address
</UL>

<P><STRONG><a name="[22e]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ERASE
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFLASH_Read
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseChip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseSector
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_DIS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_EN
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceRead_CMD
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_ChipInfo
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_ReadByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Play
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceNormal_Pin_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceUpdate_Pin_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Pin_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Reset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Segment
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_Reset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_Pin_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSwitchCtrl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[86]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ERASE
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFLASH_Read
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseChip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_EraseSector
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_DIS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_Write_EN
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceRead_CMD
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_ChipInfo
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_WriteByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI2_ReadByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Play
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Reset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Segment
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_Reset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSwitchCtrl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>

<P><STRONG><a name="[231]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[17e]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[23b]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[247]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[e2]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[182]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[143]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Config
</UL>

<P><STRONG><a name="[72]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_InitRc522
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bikeRC522_InitRc522
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pin_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pin_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Pin_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_Pin_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYSPI_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Address_GPIO_Config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIO_Configuration
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[82]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIO_Configuration
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[17c]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[180]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[183]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[248]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[7a]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[181]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[24d]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[24f]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[80]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[252]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[25a]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[14d]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[25d]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[14e]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[260]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[267]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[273]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>BKP_ITConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[dd]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[278]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>BKP_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>BKP_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[16e]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f10x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_init
</UL>

<P><STRONG><a name="[16c]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f10x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfigFilter
</UL>

<P><STRONG><a name="[16d]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_init
</UL>

<P><STRONG><a name="[27c]"></a>CAN_SlaveStartBank</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>CAN_DBGFreeze</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>CAN_TTComModeCmd</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>CAN_Transmit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f10x_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendOneFrame
</UL>

<P><STRONG><a name="[173]"></a>CAN_TransmitStatus</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f10x_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendOneFrame
</UL>

<P><STRONG><a name="[27f]"></a>CAN_CancelTransmit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f10x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[280]"></a>CAN_FIFORelease</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>CAN_MessagePending</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>CAN_OperatingModeRequest</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>CAN_Sleep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>CAN_WakeUp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>CAN_GetLastErrorCode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>CAN_GetReceiveErrorCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>CAN_GetLSBTransmitErrorCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_init
</UL>

<P><STRONG><a name="[288]"></a>CAN_GetFlagStatus</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>CAN_ClearFlag</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>CAN_GetITStatus</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, stm32f10x_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>

<P><STRONG><a name="[171]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f10x_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>CRC_ResetDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetVal
</UL>

<P><STRONG><a name="[28a]"></a>CRC_CalcCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_crc.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>CRC_CalcBlockCRC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_crc.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>CRC_GetCRC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_crc.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>CRC_SetIDRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_crc.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>CRC_GetIDRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_crc.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[292]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[293]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[d1]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[ce]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[188]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[189]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[18a]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[18c]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[18b]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
</UL>

<P><STRONG><a name="[18d]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[cf]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[18e]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[18f]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 200 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[190]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[191]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[294]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[d9]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[29b]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[e5]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[e7]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[d5]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[da]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[e6]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[193]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[2a2]"></a>RTC_GetDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[e3]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[2a3]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>RTC_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[12a]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
</UL>

<P><STRONG><a name="[2a5]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[19b]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[199]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[197]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[195]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[19e]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[2a9]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
</UL>

<P><STRONG><a name="[2ae]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
</UL>

<P><STRONG><a name="[2af]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[19f]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[1a1]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1a3]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[1a2]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1a4]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[2b3]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1a5]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1a7]"></a>OS_TaskStat</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[1ac]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[1b0]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[6c]"></a>OSInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[176]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ba]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1bb]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[1bd]"></a>OSSchedUnlock</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[6e]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[175]"></a>OSTimeTick</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2ea]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1c1]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[1c0]"></a>OS_EventTaskRdy</STRONG> (Thumb, 118 bytes, Stack size 36 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[1d8]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[1d4]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[1ed]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[1cb]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
</UL>

<P><STRONG><a name="[1c2]"></a>OS_TCBInit</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[1c5]"></a>OSFlagAccept</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1c6]"></a>OSFlagCreate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1c8]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[1c9]"></a>OSFlagDel</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1ca]"></a>OSFlagNameGet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[1cc]"></a>OSFlagNameSet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1cd]"></a>OSFlagPend</STRONG> (Thumb, 614 bytes, Stack size 72 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1cf]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1d0]"></a>OSFlagPost</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1d1]"></a>OSFlagQuery</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1b5]"></a>OS_FlagInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1d2]"></a>OSQAccept</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1d3]"></a>OSQCreate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>

<P><STRONG><a name="[1d5]"></a>OSQDel</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1d6]"></a>OSQFlush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1d7]"></a>OSQPend</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1d9]"></a>OSQPendAbort</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1da]"></a>OSQPost</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1db]"></a>OSQPostFront</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1dc]"></a>OSQPostOpt</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1dd]"></a>OSQQuery</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1b6]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1de]"></a>OSSemAccept</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[13b]"></a>OSSemCreate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_task
</UL>

<P><STRONG><a name="[1df]"></a>OSSemDel</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[13c]"></a>OSSemPend</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_task
</UL>

<P><STRONG><a name="[1e0]"></a>OSSemPendAbort</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[151]"></a>OSSemPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRxDeal
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3RcvData
</UL>

<P><STRONG><a name="[1e1]"></a>OSSemQuery</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1e2]"></a>OSSemSet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1e3]"></a>OSTaskChangePrio</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[6d]"></a>OSTaskCreate</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e5]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[1aa]"></a>OSTaskCreateExt</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[1e6]"></a>OSTaskDel</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1e9]"></a>OSTaskDelReq</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1ea]"></a>OSTaskNameGet</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[1ab]"></a>OSTaskNameSet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[1eb]"></a>OSTaskResume</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1a6]"></a>OSTaskStkChk</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[142]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1ec]"></a>OSTaskQuery</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[1ee]"></a>OSTaskRegGet</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1ef]"></a>OSTaskRegSet</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1f0]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[178]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[13a]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_task
</UL>

<P><STRONG><a name="[1f2]"></a>OSTimeDlyResume</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1f3]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1f4]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[e9]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[ec]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1be]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[1bc]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1b9]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1b7]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c4]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1e8]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1ad]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[1a8]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1e4]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[56]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[1c3]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1bf]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[1f1]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[139]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_task
</UL>

<P><STRONG><a name="[1fe]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[1ff]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[5e]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[1f7]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[be]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFlash
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_task
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInfoToSpiFlash
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRxDeal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_voiceUpdate
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_iapUpdate
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_zikuUpdate
</UL>

<P><STRONG><a name="[1fa]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2eb]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvCan1BufClearAll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcv3BufClearAll
</UL>

<P><STRONG><a name="[1fc]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2ec]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdUpdateBinary
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdReadBinary
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdSelectFile
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdExAuth
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdGetChallenge
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userRC522_PcdRats
</UL>

<P><STRONG><a name="[2ed]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2ef]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1f5]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[57]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[1fb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2f2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[65]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2f5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2f6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2f7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[70]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[6f]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d2]"></a>RTC_NVIC_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[53]"></a>beep_task</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = beep_task &rArr; userCardCheck &rArr; userRC522_PcdReadBinary &rArr; userRC522_PcdComMF522 &rArr; userRC522_ClearBitMask &rArr; userRC522_WriteRawRC &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCharToFlash
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Show_StrInLine
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_StrInLine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wt588d16_Play
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userCardCheck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>can1_task</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = can1_task &rArr; CanCommDeal &rArr; SST25_WriteFlash &rArr; Page_Clr &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanCommDeal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>uart3_task</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = uart3_task &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFT_LED_Start
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFTStartBlkTime
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_Analyse
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>SFT_CARDLEDFlash</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, softtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFT_CARDLEDFlash &rArr; LEDSwitchCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSwitchCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softtimer.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>SFTStopBlkTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, softtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFTStopBlkTime &rArr; LEDSwitchCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSwitchCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softtimer.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>comm3_zikuRequest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, communication3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = comm3_zikuRequest &rArr; eraseZikuFlash &rArr; EraseSectors &rArr; Page_Clr &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_putString
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseZikuFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> communication3.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>comm3_zikuUpdate</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, communication3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = comm3_zikuUpdate &rArr; ziku_Write &rArr; SST25_WriteFlash2 &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_putString
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ziku_Write
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetVal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> communication3.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>comm3_iapRequest</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, communication3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = comm3_iapRequest &rArr; FlashWrite &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> communication3.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>comm3_iapUpdate</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, communication3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = comm3_iapUpdate &rArr; progWrite &rArr; SPI_Flash_Write &rArr; SST25_WriteFlash &rArr; Page_Clr &rArr; Write_CMD &rArr; Busy_Test &rArr; Read_CMD &rArr; SPI_Flash_ReadByte &rArr; Rec_1_Char &rArr; spi_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_putString
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progWrite
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetVal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> communication3.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>comm3_voiceUpdate</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, communication3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = comm3_voiceUpdate &rArr; voiceWrite &rArr; VoiceFlash_Write &rArr; SPI_FLASH_Write &rArr; SPIFLASH_Write_DIS &rArr; VoiceBusy_Test &rArr; VoiceRead_CMD &rArr; MYSPI2_WriteByte &rArr; spi2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_putString
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceWrite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceFlashErase
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceUpdate_Pin_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetVal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> communication3.o(.data)
</UL>
<P><STRONG><a name="[14a]"></a>comm3_FunctionHandle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, communication3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = comm3_FunctionHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm3_Analyse
</UL>

<P><STRONG><a name="[186]"></a>CheckITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[19c]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[19a]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[198]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[196]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1a9]"></a>OS_InitTaskStat</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ae]"></a>OS_InitTaskIdle</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1af]"></a>OS_InitEventList</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1b1]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1b4]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1b3]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1b8]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1c7]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[1ce]"></a>OS_FlagBlock</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[58]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
